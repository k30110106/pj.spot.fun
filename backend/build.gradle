plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.spot'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

compileJava {
	options.compilerArgs += ['-parameters']
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'javax.validation:validation-api:2.0.1.Final'

//	JWT
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
//	Apache Commons Lang
	implementation 'org.apache.commons:commons-lang3:3.12.0'
//	Thumbnail Image
	implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.9.4'
	implementation 'net.coobird:thumbnailator:0.4.19'
// Model Mapper
	implementation 'org.modelmapper:modelmapper:3.1.1'
//  이메일 서비스
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.sun.mail:jakarta.mail:2.0.1'
//	Chat
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
// OAuth (외부로그인)
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'com.fasterxml.jackson.core:jackson-databind'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
//gradle.properties에 있는 변수env를 application.properties에서 사용하기위한 코드
def env = project.findProperty('env') ?: 'develop'
processResources {
	filesMatching('application.properties') {
		expand(env: env) }
}

tasks.named('test') {
	useJUnitPlatform()
	if(env == 'service')
	{ enabled = false }
}



////////////
////////////
// 배포용 빌드 할때만 주석해제(리액트 빌드파일 스프링부트랑 합치기)

def frontendDir = "$projectDir/../frontend"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources {
	if(env == 'service') {
	dependsOn "copyReactBuildFiles"
	}
}

tasks.register('installReact', Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

tasks.register('buildReact', Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

tasks.register('copyReactBuildFiles', Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$buildDir/resources/main/static"
}

////////////
////////////